{"version":3,"file":"static/js/865.3a1e0e36.chunk.js","mappings":"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","sources":["apis/accountApi.js","components/Custom/Field/DatePickerField.js","components/Custom/Field/InputField.js","components/Custom/Field/SelectField.js","components/Delay/index.js","components/LoginGoogle/index.js","containers/SignUp/index.js"],"sourcesContent":["import axiosClient from './axiosClient';\n\nconst ACCOUNT_API_ENDPOINT = '/accounts';\n\nconst accountApi = {\n  // fn: gửi mã xác nhận\n  postSendVerifyCode: (email) => {\n    const url = ACCOUNT_API_ENDPOINT + '/verify';\n    return axiosClient.post(url, email);\n  },\n\n  // fn: đăng ký\n  postSignUp: (account) => {\n    const url = ACCOUNT_API_ENDPOINT + '/signup';\n    return axiosClient.post(url, account);\n  },\n\n  // fn: gửi mã xác nhận lấy lại mật khẩu\n  postSendCodeForgotPW: (email) => {\n    const url = ACCOUNT_API_ENDPOINT + '/verify/forgot';\n    return axiosClient.post(url, email);\n  },\n\n  // fn: reset password\n  postResetPassword: (account) => {\n    const url = ACCOUNT_API_ENDPOINT + '/reset-pw';\n    return axiosClient.post(url, account);\n  },\n};\n\nexport default accountApi;\n","import { DatePicker } from 'antd';\nimport PropTypes from 'prop-types';\nimport React, { useEffect } from 'react';\n\nfunction DatePickerField(props) {\n  const { field, form, className, placeholder, size } = props;\n  const { name } = field;\n  const { errors, touched } = form;\n  const showError = errors[name] && touched[name];\n  const handleOnChange = (date, dateString) => {\n    form.setFieldValue(name, dateString);\n  };\n\n  useEffect(() => {\n    handleOnChange(new Date(), field.value);\n    return () => {};\n  }, []);\n\n  return (\n    <>\n      <DatePicker\n        className={showError ? className + ' error-input' : className}\n        name={name}\n        placeholder={placeholder}\n        onChange={handleOnChange}\n        size={size}\n      />\n      {showError && <div className=\"show-error-input\">{errors[name]}</div>}\n    </>\n  );\n}\n\nDatePickerField.propTypes = {\n  field: PropTypes.object.isRequired,\n  form: PropTypes.object.isRequired,\n  className: PropTypes.string,\n  placeholder: PropTypes.string,\n  size: PropTypes.string,\n};\n\nexport default DatePickerField;\n","import { Input } from 'antd';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nInputField.defaultProps = {\n  type: 'text',\n  placeholder: '',\n  size: 'large',\n  suffix: null,\n  autocomplete: 'on',\n  autofocus: false,\n  maxLength: 1000,\n};\n\nfunction InputField(props) {\n  const {\n    field,\n    form,\n    type,\n    placeholder,\n    size,\n    suffix,\n    className,\n    autocomplete,\n    autofocus,\n    ref,\n    maxLength,\n    ...rest\n  } = props;\n  const { name } = field;\n  const { errors, touched } = form;\n  const showError = errors[name] && touched[name];\n  //Input or Input.Password\n  const InputOption = type === 'password' ? Input.Password : Input;\n  return (\n    <>\n      <InputOption\n        ref={ref}\n        className={showError ? className + ' error-input' : className}\n        name={name}\n        {...field}\n        {...rest}\n        placeholder={placeholder}\n        size={size}\n        suffix={suffix}\n        autoComplete={autocomplete}\n        maxLength={maxLength}\n        autoFocus={autofocus}\n      />\n      {showError && <div className=\"show-error-input\">{errors[name]}</div>}\n    </>\n  );\n}\n\nInputField.propTypes = {\n  field: PropTypes.object.isRequired,\n  form: PropTypes.object.isRequired,\n  className: PropTypes.string,\n  type: PropTypes.string,\n  placeholder: PropTypes.string,\n  size: PropTypes.string,\n  suffix: PropTypes.object,\n  autocomplete: PropTypes.string,\n  autofocus: PropTypes.bool,\n  ref: PropTypes.any,\n  maxLength: PropTypes.number,\n};\n\nexport default InputField;\n","import { Select } from 'antd';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nSelectField.defaultProps = {\n  placeholder: '',\n  size: 'large',\n  options: [],\n};\n\nfunction SelectField(props) {\n  const { field, form, className, placeholder, options, size } = props;\n  const { name } = field;\n  const { errors, touched } = form;\n  const showError = errors[name] && touched[name];\n  //override event onchange\n  const handleOnChange = (value) => {\n    const changeEvent = {\n      target: {\n        name,\n        value,\n      },\n    };\n    field.onChange(changeEvent);\n  };\n\n  return (\n    <>\n      <Select\n        name={name}\n        {...field}\n        className={showError ? className + ' error-input' : className}\n        placeholder={placeholder}\n        size={size}\n        onChange={handleOnChange}>\n        {options &&\n          options.map((option, index) => (\n            <Select.Option key={index} value={option.value}>\n              {option.label}\n            </Select.Option>\n          ))}\n      </Select>\n    </>\n  );\n}\n\nSelectField.propTypes = {\n  field: PropTypes.object.isRequired,\n  form: PropTypes.object.isRequired,\n  className: PropTypes.string,\n  placeholder: PropTypes.string,\n  options: PropTypes.array,\n  size: PropTypes.string,\n};\n\nexport default SelectField;\n","import PropTypes from 'prop-types';\nimport { useEffect, useState } from 'react';\n\nDelay.propTypes = {\n  wait: PropTypes.number,\n};\n\nfunction Delay(props) {\n  const { wait } = props;\n  const [waiting, setWaiting] = useState(true);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setWaiting(false);\n    }, wait);\n    return () => {\n      clearTimeout(timer);\n    };\n  }, []);\n\n  return waiting === true ? null : props.children;\n}\n\nexport default Delay;\n","import { message } from 'antd';\nimport loginApi from '../../apis/loginApi';\nimport ggIcon from '../../assets/icon/gg-icon.png';\nimport constants from '../../constants/index';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport GoogleLogin from 'react-google-login';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport authReducers from '../../reducers/auth';\nimport './index.scss';\n\nfunction LoginGoogle(props) {\n  const dispatch = useDispatch();\n  const history = useHistory();\n  // xử lý khi đăng nhập thành công\n  const onLoginSuccess = async (data) => {\n    try {\n      message.success('Login Successful');\n      // lưu refresh token vào local storage\n      localStorage.setItem(constants.REFRESH_TOKEN, data.refreshToken);\n      // Note: Lưu jwt vào localStorage nếu deploy heroku\n      if (process.env.NODE_ENV === 'production')\n        localStorage.setItem(constants.ACCESS_TOKEN_KEY, data.token);\n      dispatch(authReducers.setIsAuth(true));\n      setTimeout(() => {\n        history.goBack();\n      }, constants.DELAY_TIME);\n    } catch (error) {\n      message.error('Lỗi đăng nhập.');\n    }\n  };\n\n  // login with Google\n  const onLoginWithGoogle = async (res) => {\n    try {\n      console.log(res);\n      const { accessToken } = res;\n      const response = await loginApi.postLoginWithGoogle({\n        access_token: accessToken,\n      });\n      const { status, data } = response;\n      //login success -> redirect home\n      if (status === 200) {\n        onLoginSuccess(data);\n      }\n    } catch (error) {\n      if (error.response) {\n        message.error(error.response.data.message);\n      } else {\n        message.error('Login failed, Please try again');\n      }\n    }\n  };\n\n  return (\n    <>\n      <GoogleLogin\n        clientId={process.env.REACT_APP_GOOGLE_CLIENT_ID}\n        // buttonText=\"Log in with Google\"\n        render={(renderProps) => (\n          <div\n            onClick={renderProps.onClick}\n            disabled={renderProps.disabled}\n            className={`login-gg m-0-auto login-with gg login-input`}>\n            <img src={ggIcon} className=\"login-with__icon \" />\n            <span className=\"login-with__title\">{props.title}</span>\n          </div>\n        )}\n        onSuccess={onLoginWithGoogle}\n        onFailure={onLoginWithGoogle}\n        cookiePolicy={'single_host_origin'}\n      />\n    </>\n  );\n}\n\nLoginGoogle.defaultProps = {\n  title: 'Google+',\n  className: '',\n};\n\nLoginGoogle.propTypes = {\n  title: PropTypes.string,\n  className: PropTypes.string,\n};\n\nexport default LoginGoogle;\n","//=== Sign Up Page\nimport {\n  EyeInvisibleOutlined,\n  EyeTwoTone,\n  InfoCircleOutlined,\n} from '@ant-design/icons';\nimport { Button, Col, message, Row, Tooltip } from 'antd';\nimport accountApi from '../../apis/accountApi';\nimport DatePickerField from '../../components/Custom/Field/DatePickerField';\nimport InputField from '../../components/Custom/Field/InputField';\nimport SelectField from '../../components/Custom/Field/SelectField';\nimport Delay from '../../components/Delay';\nimport LoginGoogle from '../../components/LoginGoogle';\nimport constants from '../../constants/index';\nimport { FastField, Form, Formik } from 'formik';\nimport React, { useRef, useState } from 'react';\nimport { Link, Redirect } from 'react-router-dom';\nimport * as Yup from 'yup';\nimport './index.scss';\nimport { useHistory } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\n\nfunction SignUp() {\n  const windowWidth = window.screen.width;\n\n  const history = useHistory()\n  const isAuth = useSelector((state) => state.authenticate.isAuth);\n  const [isSending, setIsSending] = useState(false);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [isRedirectLogin, setIsRedirectLogin] = useState(false);\n\n  // ref kiểm tra đã nhập email hay chưa, hỗ trợ việc gửi mã xác nhận\n  const emailRef = useRef('');\n\n  // fn: gửi mã xác nhận\n  const onSendCode = async () => {\n    try {\n      // kiểm tra email\n      const email = emailRef.current;\n      const regex = /^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/;\n\n      if (!regex.test(email)) {\n        message.error('Email không hợp lệ !');\n        return;\n      }\n      // set loading, tránh việc gửi liên tục\n      setIsSending(true);\n\n      // tiến hành gửi mã\n      const result = await accountApi.postSendVerifyCode({ email });\n      if (result.status === 200) {\n        message.success('Gửi thành công, kiểm tra email');\n        setIsSending(false);\n      }\n    } catch (error) {\n      setIsSending(false);\n      if (error.response) {\n        message.error(error.response.data.message);\n      } else {\n        message.error('Gửi thất bại, thử lại');\n      }\n    }\n  };\n\n  // fn: xử lý đăng ký\n  const onSignUp = async (account) => {\n    console.log(account);\n    try {\n      setIsSubmitting(true);\n      const result = await accountApi.postSignUp({ account });\n      if (result.status === 200) {\n        message.success('Đăng ký thành công.', 1);\n        setIsSubmitting(false);\n        setIsRedirectLogin(true);\n      }\n    } catch (error) {\n      setIsSubmitting(false);\n      if (error.response) {\n        message.error(error.response.data.message);\n      } else {\n        message.error('Đăng ký thất bại, thử lại');\n      }\n    }\n  };\n\n  // giá trị khởi tạo cho formik\n  const initialValue = {\n    email: '',\n    verifyCode: '',\n    password: '',\n    confirmPassword: '',\n    name: '',\n    address: '',\n    gender: null,\n  };\n\n  // validate form trước submit với yup\n  const validationSchema = Yup.object().shape({\n    email: Yup.string()\n      .trim()\n      .required('* Email bạn là gì ?')\n      .email('* Email không hợp lệ !'),\n    name: Yup.string()\n      .trim()\n      .required('* Tên bạn là gì ?')\n      .matches(\n        /[^~!@#%\\^&\\*()_\\+-=\\|\\\\,\\.\\/\\[\\]{}'\"`]/,\n        '* Không được chứa ký tự đặc biệt',\n      )\n      .max(70, '* Tối đa 70 ký tự'),\n    verifyCode: Yup.string()\n      .trim()\n      .required('* Nhập mã xác nhận')\n      .length(\n        constants.MAX_VERIFY_CODE,\n        `* Mã xác nhận có ${constants.MAX_VERIFY_CODE} ký tự`,\n      ),\n    password: Yup.string()\n      .trim()\n      .required('* Please enter your password.')\n      .min(6, '* Password must be 6-20 character')\n      .max(20, '* Password must be 6-20 character')\n      .matches(\n        /^(?=.*[A-Z])(?=.*[~!@#%\\^&\\*()_\\+-=\\|\\\\,\\.\\/\\[\\]{}'\"`])(?=.*[0-9])(?=.*[a-z]).{6,}$/,\n        'Must be include uppercase, lowercase, number and special character',\n\n      ),\n    confirmPassword: Yup.string().oneOf(\n      [Yup.ref('password'), null],\n      '* Password not match',\n    ),\n    dateOfBirth: Yup.date()\n      .notRequired()\n      .min(new Date(1900, 1, 1), '* Năm sinh từ 1900')\n      .max(\n        new Date(new Date().getFullYear() - parseInt(constants.MIN_AGE), 1, 1),\n        `* Tuổi tối thiểu là ${constants.MIN_AGE}`,\n      ),\n    gender: Yup.string().required('* Giới tính của bạn'),\n    address: Yup.string()\n      .trim()\n      .max(100, '* Tối đa 100 ký tự'),\n    phone_no: Yup.string().test('phone number must be start with zero', '* Phone number is not valid', (value) => value.startsWith(\"0\")).matches(/^((\\\\+[1-9]{1,4}[ \\\\-]*)|(\\\\([0-9]{2,3}\\\\)[ \\\\-]*)|([0-9]{2,4})[ \\\\-]*)*?[0-9]{3,4}?[ \\\\-]*[0-9]{3,4}?$/, '* Phone number is not valid').max(11, '* Phone number is not valid').min(10, \"* Phone number is not valid\")\n  });\n\n  // return...\n  return (\n    <div className=\"SignUp container\">\n      {/*// Note: chuyển đến trang login khi đăng ký thành công */}\n      {isRedirectLogin && (\n        <Delay wait={constants.DELAY_TIME}>\n          <Redirect to={constants.ROUTES.LOGIN} />\n        </Delay>\n      )}\n      {isAuth && (<>\n        {history.goBack()}\n      </>\n      )}\n      <h1 className=\"SignUp-title underline-title m-b-20 m-t-20\">\n        <b>Registration</b>\n      </h1>\n      <Formik\n        initialValues={initialValue}\n        validationSchema={validationSchema}\n        onSubmit={onSignUp}>\n        {(formikProps) => {\n          emailRef.current = formikProps.values.email;\n          const suffixColor = 'rgba(0, 0, 0, 0.25)';\n          return (\n            <Form className=\"bg-form\">\n              <Row\n                className=\"input-border\"\n                gutter={[64, 32]}\n                style={{ margin: 0, padding: \"32px 0\" }}>\n                {/* Form thông tin đăng ký */}\n                <Col className=\"p-b-0\" span={24} md={12}>\n                  <Row gutter={[0, 16]} className=\"justify-content-center\">\n                    <h2>Account Information</h2>\n                    <Col span={24}>\n                      {/* email field */}\n                      <FastField\n                        name=\"email\"\n                        component={InputField}\n                        className=\"input-form-common\"\n                        placeholder=\"Email *\"\n                        size=\"large\"\n                        suffix={\n                          <Tooltip title=\"Email của bạn\">\n                            <InfoCircleOutlined\n                              style={{\n                                color: suffixColor,\n                              }}\n                            />\n                          </Tooltip>\n                        }\n                      />\n                    </Col>\n                    <Col span={24}>\n                      user name field\n                      <FastField\n                        name=\"verifyCode\"\n                        component={InputField}\n                        className=\"input-form-common\"\n                        placeholder=\"CODE *\"\n                        size=\"large\"\n                        suffix={\n                          <Tooltip title=\"Click gửi mã để nhận mã qua email\">\n                            <InfoCircleOutlined\n                              style={{ color: suffixColor }}\n                            />\n                          </Tooltip>\n                        }\n                      />\n                    </Col>\n                    <Col span={24} md={8}>\n                      <Button\n                        className=\"w-100 verify-btn\"\n                        type=\"primary\"\n                        size=\"large\"\n                        onClick={onSendCode}\n                        loading={isSending}>\n                        Send Code\n                      </Button>\n                    </Col>\n                    <Col span={24}>\n                      {/* password field */}\n                      <FastField\n                        name=\"password\"\n                        component={InputField}\n                        className=\"input-form-common\"\n                        type=\"password\"\n                        placeholder=\"Password *\"\n                        size=\"large\"\n                        autocomplete=\"on\"\n                        iconRender={(visible) =>\n                          visible ? <EyeTwoTone /> : <EyeInvisibleOutlined />\n                        }\n                      />\n                    </Col>\n                    <Col span={24}>\n                      {/* confirm password field */}\n                      <FastField\n                        name=\"confirmPassword\"\n                        component={InputField}\n                        className=\"input-form-common\"\n                        type=\"password\"\n                        placeholder=\"Comfirm pasword *\"\n                        size=\"large\"\n                        iconRender={(visible) =>\n                          visible ? <EyeTwoTone /> : <EyeInvisibleOutlined />\n                        }\n                      />\n                    </Col>\n                  </Row>\n                </Col>\n\n                {/* Form thông tin chi tiết */}\n                <Col className=\"p-b-0\" span={24} md={12}>\n                  <Row gutter={[0, 16]}>\n                    <h2>Personal Information</h2>\n                    <Col span={24}>\n                      {/* full name filed */}\n                      <FastField\n                        name=\"name\"\n                        component={InputField}\n                        className=\"input-form-common\"\n                        placeholder=\"Full name *\"\n                        size=\"large\"\n                        suffix={\n                          <Tooltip title=\"your full name\">\n                            <InfoCircleOutlined\n                              style={{ color: suffixColor }}\n                            />\n                          </Tooltip>\n                        }\n                      />\n                    </Col>\n                    <Col span={24}>\n                      {/* dateOfBirth field */}\n                      <FastField\n                        className=\"input-form-common\"\n                        name=\"dateOfBirth\"\n                        component={DatePickerField}\n                        placeholder=\"Date of Birth\"\n                        size=\"large\"\n                      />\n                    </Col>\n                    <Col span={24}>\n                      {/* gender field */}\n                      <FastField\n                        className=\"input-form-common gender-field\"\n                        size=\"large\"\n                        name=\"gender\"\n                        component={SelectField}\n                        placeholder=\"Gender *\"\n                        options={constants.GENDER_OPTIONS}\n                      />\n                    </Col>\n                    <Col span={24}>\n                      {/* address filed */}\n                      <FastField\n                        name=\"address\"\n                        component={InputField}\n                        className=\"input-form-common\"\n                        placeholder=\"Address *\"\n                        size=\"large\"\n                        suffix={\n                          <Tooltip title=\"Địa chỉ của bạn\">\n                            <InfoCircleOutlined\n                              style={{ color: suffixColor }}\n                            />\n                          </Tooltip>\n                        }\n                      />\n                    </Col>\n                    <Col span={24}>\n                      {/* address filed */}\n                      <FastField\n                        name=\"phone_no\"\n                        component={InputField}\n                        className=\"input-form-common\"\n                        placeholder=\"Phone number\"\n                        size=\"large\"\n                        suffix={\n                          <Tooltip title=\"your phone number\">\n                            <InfoCircleOutlined\n                              style={{ color: suffixColor }}\n                            />\n                          </Tooltip>\n                        }\n                      />\n                    </Col>\n                  </Row>\n                </Col>\n\n                {/* Button submit */}\n                <Col className=\"p-t-8 p-b-0 t-center\" span={24}>\n                  <Button\n                    className=\"SignUp-submit-btn w-100\"\n                    size=\"large\"\n                    type=\"primary\"\n                    htmlType=\"submit\"\n                    loading={isSubmitting}>\n                    Register\n                  </Button>\n                </Col>\n\n                <Col span={24} className=\"p-t-0 t-center\">\n                  <div className=\"or-option\" style={{ color: '#acacac' }}>\n                    Log in with\n                  </div>\n                  <LoginGoogle\n                    className=\"login-gg m-0-auto login-gg\"\n                    title={windowWidth > 375 ? 'Log in with Gmail' : 'Gmail'}\n                  />\n                  <div className=\"m-t-10 font-weight-500\">\n                    Already have an account?\n                    <Link to={constants.ROUTES.LOGIN}>&nbsp;Log in</Link>\n                  </div>\n                </Col>\n              </Row>\n            </Form>\n          );\n        }}\n      </Formik>\n    </div>\n  );\n}\n\nexport default SignUp;\n"],"names":["accountApi","postSendVerifyCode","email","axiosClient","ACCOUNT_API_ENDPOINT","postSignUp","account","postSendCodeForgotPW","postResetPassword","props","field","form","className","placeholder","size","name","errors","touched","showError","handleOnChange","date","dateString","setFieldValue","useEffect","Date","value","onChange","InputField","type","suffix","autocomplete","autofocus","ref","maxLength","rest","InputOption","Input","autoComplete","autoFocus","defaultProps","SelectField","options","changeEvent","target","map","option","index","label","Delay","wait","useState","waiting","setWaiting","timer","setTimeout","clearTimeout","children","propTypes","PropTypes","LoginGoogle","dispatch","useDispatch","history","useHistory","onLoginSuccess","data","message","localStorage","setItem","constants","refreshToken","token","authReducers","goBack","error","onLoginWithGoogle","res","console","log","accessToken","loginApi","access_token","response","status","clientId","process","render","renderProps","onClick","disabled","src","ggIcon","title","onSuccess","onFailure","cookiePolicy","windowWidth","window","screen","width","isAuth","useSelector","state","authenticate","isSending","setIsSending","isSubmitting","setIsSubmitting","isRedirectLogin","setIsRedirectLogin","emailRef","useRef","onSendCode","current","test","onSignUp","validationSchema","Yup","shape","trim","required","matches","max","verifyCode","length","password","min","confirmPassword","oneOf","dateOfBirth","notRequired","getFullYear","parseInt","gender","address","phone_no","startsWith","Redirect","to","initialValues","onSubmit","formikProps","values","suffixColor","gutter","style","margin","padding","span","md","component","InfoCircleOutlined","color","loading","iconRender","visible","EyeTwoTone","EyeInvisibleOutlined","DatePickerField","htmlType"],"sourceRoot":""}